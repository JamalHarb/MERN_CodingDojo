Create a database called 'my_first_db'

use my_first_db

====================================================================================

Create students collection

db.createCollection("students")

====================================================================================

Create 5 students with the appropriate info

db.students.insert({name: "Jamal", home_state: "Nablus", lucky_number: 5, birthday: {month: 2, day: 16, year: 1992}})
db.students.insert({name: "Laith", home_state: "Nablus", lucky_number: 7, birthday: {month: 7, day: 20, year: 1999}})
db.students.insert({name: "Khaled", home_state: "Tulkarm", lucky_number: 11, birthday: {month: 10, day: 1, year: 1997}})
db.students.insert({name: "Ahmad", home_state: "Ramallah", lucky_number: 1, birthday: {month: 3, day: 23, year: 1996}})
db.students.insert({name: "Amin", home_state: "Qalqilya", lucky_number: 20, birthday: {month: 9, day: 30, year: 1989}})

====================================================================================

Get all students
db.students.find()

====================================================================================

Retrieve all students who are from Nablus or Ramallah

db.students.find({home_state: {$in: ["Nablus", "Ramallah"]}})

====================================================================================

Get all students whose lucky number is greater than 3

db.students.find({lucky_number: {$gt: 3}})

====================================================================================

Get all students whose lucky number is less than or equal to 10

db.students.find({lucky_number: {$lte: 10}})

====================================================================================

Get all students whose lucky number is between 1 and 9 (inclusive)


db.students.find({lucky_number: {$gte: 1, $lte: 9}})

====================================================================================

Add a field to each student collection called 'interests' that is an ARRAY. It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation
Upsert: If set to true, creates a new document when no document matches the query criteria.
Multi: If set to true, updates multiple documents that meet the query criteria. If set to false, updates one document.

db.students.update({}, {$set: {interests: ["coding", "brunch", "MongoDB"]}}, {upsert: false, multi: true})

====================================================================================

Add some unique interests for each particular student into each of their interest arrays

db.students.update({}, {$addToSet: {interests: {$each: ["football", "traveling", "swimming"]}}}, {upsert: false, multi: true})

====================================================================================

Add the interest 'taxes' into someone's interest array

db.students.update({name: "Jamal"}, {$addToSet: {interests: "taxes"}})

====================================================================================

Remove the 'taxes' interest you just added

db.students.update({name: "Jamal"}, {$pull: {interests: "taxes"}})

====================================================================================

Remove all students who are from Ramallah or Qalqilya

db.students.remove({home_state: {$in: ["Ramallah", "Qalqilya"]}})

====================================================================================

Remove a student by name

db.students.remove({name: "Laith"})

====================================================================================

Remove a student whose lucky number is greater than 5 (JUST ONE)

db.students.remove({lucky_number: {$gt: 5}}, true)

====================================================================================

Add a field to each student collection called 'number_of_belts' and set it to 0

db.students.update({}, {$set: {number_of_belts: 0}})

====================================================================================

Increment this field by 1 for all students in Nablus

db.students.update({home_state: "Nablus"}, {$inc: {number_of_belts: 1}}, {multi: true})

====================================================================================

Rename the 'number_of_belts' field to 'belts_earned'

db.students.update({}, {$rename: {"number_of_belts": "belts_earned"}}, {multi: true})

====================================================================================

Remove the 'lucky_number' field

db.students.update({}, {$unset: {"lucky_number": 1}}, {multi: true})

====================================================================================

Add a 'updated_on' field, and set the value as the current date

db.students.update({}, {$set: {updated_on: "2022-12-19"}}, {multi: true})

OR CREATE AN EMPTY FIELD (OR THE PREV FIELD) AND THEN ==>

db.students.update({}, {$currentDate: {updated_on: {$type: "date"}}}, {multi: true})

====================================================================================

IN mongosh, YOU CAN ALSO USE

updateMany, deleteOne